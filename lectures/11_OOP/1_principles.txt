Principle of Object Oriented Programming:
    เป็นการเลียนแบบวิธีคิดของวัตถุในชีวิตจริง โดยระบุ "สถานะ" และ "พฤติกรรม" สำหรับวัตถุของซอฟต์แวร์
    โดยวัตถุ (object) จะเก็บสถานะใน ฟิล์ด (field) และเปิดเผลพฤติกรรมผ่าน เมธอด (method) โดยที่ 
    method จะดำเนินการกับสถานะภายใน object นั้น

    https://phayao.medium.com/4-%E0%B9%80%E0%B8%AA%E0%B8%B2%E0%B8%AB%E0%B8%A5%E0%B8%B1%E0%B8%81%E0%B8%82%E0%B8%AD%E0%B8%87-object-oriented-programming-247ca02c633b

    หลักการเขียนโปรแกรมเชิงวัตถุประกอบด้วย:
        Abstraction:
            กรรมวิธีกำจัดคุณลักศณะเฉพาะบางอย่างออกไป เพื่อให้เหลือแค่คุณลักษณะที่จำเป็นเท่านั้น
            โดยใน oop คือการซ่อน attribute และ behaviour ทุกอย่างที่ไม่เกี่ยวข้องกับ object 
            เพื่อช่วยลดความซ้ำซ้อน

        Encapsulation:
            เป็นการห่อหุ้มข้อมูลสถานะหรือข้อมูลของ object จากภายนอกไม่ให้สามารถเข้าถึงสถานะของ object ได้
            โดยการเข้าถึงจะต้องกระทำผ่าน method เท่านั้น (getter/setter) โดยการซ่อนข้อมูลจะมีดังนี้
                private
                proteched
                public

        Ingeritance:
            เป็นการสืบทอดคุณสมบัตรของ object จาก super class ไปยัง sub class ทำให้ sub class 
            จะได้รับคุณสมบัติของ super class ทั้งหทด และยังสามารถเปลี่ยนแปรงพฤติกรรมของบาง method (overriding)
            ที่สืบทอดมาได้ และยังสามารถขยายความสามารถเพิ่มเติมได้ด้วย

        Polymorphism:
            เปรียบเทียบกับชีววิทยา สิ่งมีชีวิตที่หลายรูปแบบ หลายสายพันธุ์ เช่น มนุษย์มี มองโกลลอยด์ คอเคซอยด์ หรือนิกกรอยด์
            ซึ่งทำหมดก็เป็นมนุษย์เหมือนกัน

            sub class สามารถกำหนดพฤติกรรมที่เป็นเอกลักษณ์ของตนเองได้ และยังแชร์บางส่วนของฟังก์ชันการทำงานเดียวกันกับ
            super class 

            SuperClass sp = new SubClass();
            จาก code ตัวอย่าง ถ้า sub class ได้ทำการ overriding method ไป พฤติกรรมของ super class จะเปลี่ยนแปลงไปตาม
            sub class